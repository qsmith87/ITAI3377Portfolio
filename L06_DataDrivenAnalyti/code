{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nCirD1CjlThe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a5aba709-3fe3-4a2b-bb24-d5370474d5f0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/42.2 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.2/42.2 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ],
      "source": [
        "!pip install nixtla --quiet\n",
        "!pip install pandas --quiet\n",
        "!pip install numpy --quiet\n",
        "!pip install scikit-learn --quiet\n",
        "!pip install tensorflow --quiet\n",
        "!pip install matplotlib --quiet\n",
        "!pip install seaborn --quiet\n",
        "!pip install kaggle --quiet\n",
        "!pip install -q kaggle\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "from google.colab import files\n",
        "\n",
        "# Ensure Kaggle directory exists\n",
        "if not os.path.exists('/root/.kaggle'):\n",
        "    os.makedirs('/root/.kaggle')\n",
        "\n",
        "# Upload kaggle.json if it doesn't exist\n",
        "if not os.path.exists('/root/.kaggle/kaggle.json'):\n",
        "    uploaded = files.upload()\n",
        "    for fn in uploaded.keys():\n",
        "        if fn == 'kaggle.json':\n",
        "            os.rename(fn, '/root/.kaggle/kaggle.json')\n",
        "            os.chmod('/root/.kaggle/kaggle.json', 600)\n",
        "            print(\"Kaggle API token uploaded and configured.\")\n",
        "        else:\n",
        "            print(f\"Ignoring file: {fn}. Please upload kaggle.json.\")\n",
        "else:\n",
        "    print(\"Kaggle API token already exists.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "id": "dHbVRQDo3qmn",
        "outputId": "287bfd38-71a5-43ac-bc40-d1b2f049d8d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-55294e7e-64c6-4bd3-a65f-8a4b704983f2\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-55294e7e-64c6-4bd3-a65f-8a4b704983f2\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-5d4cf754efc3>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Upload kaggle.json if it doesn't exist\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/root/.kaggle/kaggle.json'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0muploaded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mfn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0muploaded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfn\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'kaggle.json'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mupload\u001b[0;34m(target_dir)\u001b[0m\n\u001b[1;32m     70\u001b[0m   \"\"\"\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m   \u001b[0muploaded_files\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_upload_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m   \u001b[0;31m# Mapping from original filename to filename as saved locally.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m   \u001b[0mlocal_filenames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36m_upload_files\u001b[0;34m(multiple)\u001b[0m\n\u001b[1;32m    162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m   \u001b[0;31m# First result is always an indication that the file picker has completed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 164\u001b[0;31m   result = _output.eval_js(\n\u001b[0m\u001b[1;32m    165\u001b[0m       'google.colab._files._uploadFiles(\"{input_id}\", \"{output_id}\")'.format(\n\u001b[1;32m    166\u001b[0m           \u001b[0minput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutput_id\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/output/_js.py\u001b[0m in \u001b[0;36meval_js\u001b[0;34m(script, ignore_result, timeout_sec)\u001b[0m\n\u001b[1;32m     38\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mignore_result\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0m_message\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_read_next_input_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_NOT_READY\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m       \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.025\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m       \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     if (\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import os\n",
        "\n",
        "from sklearn.model_selection import train_test_split  # We'll use manual split later\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "\n",
        "# Display settings for better readability in Pandas\n",
        "pd.set_option('display.max_columns', None)\n",
        "pd.set_option('display.max_rows', 100)\n",
        "\n",
        "print(\"Libraries imported.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5abnBmSG32K-",
        "outputId": "b395d770-dbe2-4bef-a7ed-df1ffac6fa0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Libraries imported.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "SK3TfN-z4Ltm",
        "outputId": "9ea98df1-5a98-46d3-8103-096beae4114f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-e8647935-4902-401e-8737-46281dbf5a05\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-e8647935-4902-401e-8737-46281dbf5a05\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving IOT-temp.csv to IOT-temp.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# Create the 'data' directory if it doesn't exist\n",
        "if not os.path.exists('./data'):\n",
        "    os.makedirs('./data')\n",
        "\n"
      ],
      "metadata": {
        "id": "6MNarxCJ8JRh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil\n",
        "\n",
        "# Move the uploaded CSV file to the ./data directory\n",
        "shutil.move('IOT-temp.csv', './data/IOT-temp.csv')\n",
        "\n",
        "# Verify the file has been moved\n",
        "print(\"Files in ./data:\", os.listdir('./data'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iQalZDcN8kBQ",
        "outputId": "3fb6366f-fbab-487a-c20d-a2107f42fd61"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Files in ./data: ['IOT-temp.csv']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Adjust filename if necessary\n",
        "csv_file_path = './data/IOT-temp.csv'\n",
        "\n",
        "# Load the CSV file into a DataFrame\n",
        "df = pd.read_csv(csv_file_path)\n",
        "\n",
        "# Display information about the dataset\n",
        "print(f\"Dataset loaded from {csv_file_path}\")\n",
        "print(f\"Shape of dataset: {df.shape}\")  # Shows (rows, columns)\n",
        "\n",
        "# Display the first 5 rows\n",
        "print(\"First 5 rows:\")\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aB-5dIvV8lG9",
        "outputId": "af3e03bb-9009-45bc-d0d5-b27be9641190"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset loaded from ./data/IOT-temp.csv\n",
            "Shape of dataset: (97606, 5)\n",
            "First 5 rows:\n",
            "                                    id  room_id/id        noted_date  temp  \\\n",
            "0  __export__.temp_log_196134_bd201015  Room Admin  08-12-2018 09:30    29   \n",
            "1  __export__.temp_log_196131_7bca51bc  Room Admin  08-12-2018 09:30    29   \n",
            "2  __export__.temp_log_196127_522915e3  Room Admin  08-12-2018 09:29    41   \n",
            "3  __export__.temp_log_196128_be0919cf  Room Admin  08-12-2018 09:29    41   \n",
            "4  __export__.temp_log_196126_d30b72fb  Room Admin  08-12-2018 09:29    31   \n",
            "\n",
            "  out/in  \n",
            "0     In  \n",
            "1     In  \n",
            "2    Out  \n",
            "3    Out  \n",
            "4     In  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check data structure\n",
        "print(\"\\n--- Data Info ---\")\n",
        "df.info()\n",
        "\n",
        "# Statistical Summary of the data\n",
        "print(\"\\n--- Statistical Summary ---\")\n",
        "print(df.describe())\n",
        "\n",
        "# Check for missing values\n",
        "print(\"\\n--- Missing Values ---\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Fill missing temperature values with forward fill if any\n",
        "if df['temp'].isnull().sum() > 0:\n",
        "    df['temp'].fillna(method='ffill', inplace=True)\n",
        "    print(f\"\\nFilled missing 'temp' values using forward fill.\")\n",
        "    print(f\"Missing 'temp' values remaining: {df['temp'].isnull().sum()}\")\n",
        "else:\n",
        "    print(\"\\nNo missing 'temp' values found.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pQH2hEZJ80LD",
        "outputId": "3d9df410-93c8-4803-c736-d3349778a50b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Data Info ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 97606 entries, 0 to 97605\n",
            "Data columns (total 5 columns):\n",
            " #   Column      Non-Null Count  Dtype \n",
            "---  ------      --------------  ----- \n",
            " 0   id          97606 non-null  object\n",
            " 1   room_id/id  97606 non-null  object\n",
            " 2   noted_date  97606 non-null  object\n",
            " 3   temp        97606 non-null  int64 \n",
            " 4   out/in      97606 non-null  object\n",
            "dtypes: int64(1), object(4)\n",
            "memory usage: 3.7+ MB\n",
            "\n",
            "--- Statistical Summary ---\n",
            "               temp\n",
            "count  97606.000000\n",
            "mean      35.053931\n",
            "std        5.699825\n",
            "min       21.000000\n",
            "25%       30.000000\n",
            "50%       35.000000\n",
            "75%       40.000000\n",
            "max       51.000000\n",
            "\n",
            "--- Missing Values ---\n",
            "id            0\n",
            "room_id/id    0\n",
            "noted_date    0\n",
            "temp          0\n",
            "out/in        0\n",
            "dtype: int64\n",
            "\n",
            "No missing 'temp' values found.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Visualize temperature readings over time\n",
        "plt.figure(figsize=(15, 5))\n",
        "df['temp'].plot(title='Temperature Readings Over Time')\n",
        "plt.ylabel('Temperature')\n",
        "plt.xlabel('Data Point Index')\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "9KyNerC-83sL",
        "outputId": "c81eb067-7c92-4103-ca31-0f03b3cc7593"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert 'noted_date' to datetime objects\n",
        "df['noted_date'] = pd.to_datetime(df['noted_date'], format='%d-%m-%Y %H:%M', errors='coerce')\n",
        "# Added format='%d-%m-%Y %H:%M' to specify the correct format\n",
        "# Added errors='coerce' to handle potential errors by setting invalid dates to NaT (Not a Time)\n",
        "\n",
        "# Set 'noted_date' as the index\n",
        "df = df.set_index('noted_date')\n",
        "\n",
        "# Sort the index chronologically\n",
        "df = df.sort_index()\n",
        "\n",
        "# Optional: Drop the original 'id' columns if not needed\n",
        "# df = df.drop(columns=['id', 'room_id/id'], errors='ignore')  # Adjust column names as needed\n",
        "\n",
        "print(\"\\nConverted 'noted_date' to datetime index and sorted.\")\n",
        "print(f\"Index type: {df.index.dtype}\")\n",
        "print(f\"Data ranges from {df.index.min()} to {df.index.max()}\")\n",
        "print(\"DataFrame head with datetime index:\")\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yCcsCmC4-Ev1",
        "outputId": "20b1d4bd-6cb2-4c1e-e0cc-416481986c99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Converted 'noted_date' to datetime index and sorted.\n",
            "Index type: datetime64[ns]\n",
            "Data ranges from 2018-07-28 07:06:00 to 2018-12-08 09:30:00\n",
            "DataFrame head with datetime index:\n",
            "                                                      id  room_id/id  temp  \\\n",
            "noted_date                                                                   \n",
            "2018-07-28 07:06:00  __export__.temp_log_133741_32958703  Room Admin    31   \n",
            "2018-07-28 07:06:00  __export__.temp_log_123297_4d8e690b  Room Admin    31   \n",
            "2018-07-28 07:06:00  __export__.temp_log_100386_84093a68  Room Admin    31   \n",
            "2018-07-28 07:07:00  __export__.temp_log_118398_6ebe504d  Room Admin    31   \n",
            "2018-07-28 07:07:00  __export__.temp_log_144221_a4f20688  Room Admin    31   \n",
            "\n",
            "                    out/in  \n",
            "noted_date                  \n",
            "2018-07-28 07:06:00     In  \n",
            "2018-07-28 07:06:00     In  \n",
            "2018-07-28 07:06:00     In  \n",
            "2018-07-28 07:07:00     In  \n",
            "2018-07-28 07:07:00     In  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the target column (temperature)\n",
        "target_column = 'temp'  # The column you want to predict\n",
        "\n",
        "# Calculate the split point (80% of data length)\n",
        "split_ratio = 0.8\n",
        "split_index = int(len(df) * split_ratio)\n",
        "\n",
        "# Split the DataFrame\n",
        "train_df = df.iloc[:split_index].copy()  # Use .copy() to avoid SettingWithCopyWarning\n",
        "test_df = df.iloc[split_index:].copy()\n",
        "\n",
        "# Display the split information\n",
        "print(f\"\\nSplitting data at index {split_index}:\")\n",
        "print(f\"Training set shape: {train_df.shape}, from {train_df.index.min()} to {train_df.index.max()}\")\n",
        "print(f\"Testing set shape: {test_df.shape}, from {test_df.index.min()} to {test_df.index.max()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Spt1RaT_-jOF",
        "outputId": "eacb2d94-dbc9-4f76-cf47-d213f4dd6c46"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Splitting data at index 78084:\n",
            "Training set shape: (78084, 4), from 2018-07-28 07:06:00 to 2018-10-23 02:42:00\n",
            "Testing set shape: (19522, 4), from 2018-10-23 02:48:00 to 2018-12-08 09:30:00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Initialize the MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "# Name for the new scaled column\n",
        "scaled_column_name = target_column + '_scaled'\n",
        "\n",
        "# Fit the scaler on the training data only and transform it\n",
        "# Reshape to 2D array for scaler\n",
        "train_df[scaled_column_name] = scaler.fit_transform(train_df[[target_column]])\n",
        "\n",
        "# Transform the test data using the same scaler\n",
        "test_df[scaled_column_name] = scaler.transform(test_df[[target_column]])\n",
        "\n",
        "# Display results\n",
        "print(\"\\nApplied MinMaxScaler (0-1 scaling) to 'temp' column.\")\n",
        "print(\"Scaler min/max learned from training data:\", scaler.data_min_, scaler.data_max_)\n",
        "print(\"Example scaled values in training data:\")\n",
        "print(train_df[[target_column, scaled_column_name]].head())\n",
        "print(\"\\nExample scaled values in testing data:\")\n",
        "print(test_df[[target_column, scaled_column_name]].head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CY8NcNQx_eJA",
        "outputId": "17241f0b-b0f9-4212-a715-b5b2630d3017"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Applied MinMaxScaler (0-1 scaling) to 'temp' column.\n",
            "Scaler min/max learned from training data: [22.] [51.]\n",
            "Example scaled values in training data:\n",
            "                     temp  temp_scaled\n",
            "noted_date                            \n",
            "2018-07-28 07:06:00    31     0.310345\n",
            "2018-07-28 07:06:00    31     0.310345\n",
            "2018-07-28 07:06:00    31     0.310345\n",
            "2018-07-28 07:07:00    31     0.310345\n",
            "2018-07-28 07:07:00    31     0.310345\n",
            "\n",
            "Example scaled values in testing data:\n",
            "                     temp  temp_scaled\n",
            "noted_date                            \n",
            "2018-10-23 02:48:00    37     0.517241\n",
            "2018-10-23 02:50:00    33     0.379310\n",
            "2018-10-23 02:50:00    37     0.517241\n",
            "2018-10-23 02:52:00    38     0.551724\n",
            "2018-10-23 02:54:00    32     0.344828\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Use the scaled temperature column as the target variable 'y'\n",
        "y_column_nixtla = scaled_column_name\n",
        "\n",
        "# Reset index to get 'noted_date' back as a column\n",
        "train_nixtla_df = train_df.reset_index()\n",
        "test_nixtla_df = test_df.reset_index()  # Keep test set separate for prediction later\n",
        "\n",
        "# Rename columns for Nixtla format\n",
        "train_nixtla_df = train_nixtla_df.rename(columns={'noted_date': 'ds', y_column_nixtla: 'y'})\n",
        "test_nixtla_df = test_nixtla_df.rename(columns={'noted_date': 'ds', y_column_nixtla: 'y'})\n",
        "\n",
        "# Add 'unique_id' column for each time series (sensor)\n",
        "train_nixtla_df['unique_id'] = 'sensor_1'\n",
        "test_nixtla_df['unique_id'] = 'sensor_1'\n",
        "\n",
        "# Select only the required columns for Nixtla input\n",
        "train_nixtla_input = train_nixtla_df[['unique_id', 'ds', 'y']]\n",
        "\n",
        "# Display the prepared training data\n",
        "print(\"\\nPrepared training data for Nixtla format:\")\n",
        "print(train_nixtla_input.head())\n",
        "print(f\"Training input shape: {train_nixtla_input.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I1Waye8mClVr",
        "outputId": "5ff13308-cc51-4f6c-d636-a49cdf867a3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Prepared training data for Nixtla format:\n",
            "  unique_id                  ds         y\n",
            "0  sensor_1 2018-07-28 07:06:00  0.310345\n",
            "1  sensor_1 2018-07-28 07:06:00  0.310345\n",
            "2  sensor_1 2018-07-28 07:06:00  0.310345\n",
            "3  sensor_1 2018-07-28 07:07:00  0.310345\n",
            "4  sensor_1 2018-07-28 07:07:00  0.310345\n",
            "Training input shape: (78084, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from nixtla import NixtlaClient\n",
        "...\n"
      ],
      "metadata": {
        "id": "koxNMirCE_ik"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# Set your API key like this\n",
        "os.environ['NIXTLA_API_KEY'] = 'nixak-tiPRpXvzFKomylOvWZ3c5ofXzJBv9MGIWiNdJn2mErxPj5wMk1KP0O4K9qFkmtj7M'\n"
      ],
      "metadata": {
        "id": "eySyxpfVFa5y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from nixtla import NixtlaClient\n",
        "\n",
        "# Pull from environment variable\n",
        "api_key = os.getenv(\"NIXTLA_API_KEY\")\n",
        "nixtla_client = NixtlaClient(api_key=api_key)\n"
      ],
      "metadata": {
        "id": "6wPDlrQDF6y4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "# 1. Sort & filter numeric columns\n",
        "train_df = train_df.sort_index()\n",
        "numeric_df = train_df.select_dtypes(include='number')\n",
        "\n",
        "# 2. Resample\n",
        "train_df_resampled = numeric_df.resample('2min').mean()\n",
        "\n",
        "# --- FIX ---  Fill missing timestamps after resampling with forward fill and backward fill\n",
        "# Forward fill to handle gaps within the data\n",
        "train_df_resampled = train_df_resampled.fillna(method='ffill')\n",
        "# Backward fill to handle potential gaps at the beginning\n",
        "train_df_resampled = train_df_resampled.fillna(method='bfill')\n",
        "\n",
        "# 3. Format for Nixtla\n",
        "train_nixtla_input = train_df_resampled[['temp_scaled']].reset_index()\n",
        "\n",
        "# Rename 'noted_date' to 'ds' and 'temp_scaled' to 'y' for compatibility with Nixtla\n",
        "train_nixtla_input = train_nixtla_input.rename(columns={'noted_date': 'ds', 'temp_scaled': 'y'}) # Rename columns\n",
        "\n",
        "# 4. Set freq and run forecast\n",
        "freq = '2min'  # use 'min' instead of deprecated 'T'\n",
        "\n",
        "# Change the model to a supported model like 'timegpt-1'\n",
        "fcst_df_scaled = nixtla_client.forecast(\n",
        "    df=train_nixtla_input,\n",
        "    h=horizon,  # Make sure 'horizon' is defined\n",
        "    freq=freq,\n",
        "    model='timegpt-1',  # Changed from 'auto' to 'timegpt-1'\n",
        "    level=[80, 95]\n",
        ")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kcmCh4MYHYck",
        "outputId": "f0eacae6-0bee-4d1a-ff88-bb8dde12570b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-52-16df08a2023a>:10: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  train_df_resampled = train_df_resampled.fillna(method='ffill')\n",
            "<ipython-input-52-16df08a2023a>:12: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  train_df_resampled = train_df_resampled.fillna(method='bfill')\n",
            "WARNING:nixtla.nixtla_client:The specified horizon \"h\" exceeds the model horizon, this may lead to less accurate forecasts. Please consider using a smaller horizon.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# 3. Convert Predictions Back to Original Scale\n",
        "if fcst_df_scaled is not None:\n",
        "    # 3.1 Identify the prediction column\n",
        "    pred_col_name = 'AutoML'  # default guess\n",
        "    if pred_col_name not in fcst_df_scaled.columns:\n",
        "        # pick the first non‐interval, non‐ID column\n",
        "        potential_cols = [\n",
        "            c for c in fcst_df_scaled.columns\n",
        "            if c not in ['unique_id', 'ds'] and '-lo-' not in c and '-hi-' not in c\n",
        "        ]\n",
        "        if potential_cols:\n",
        "            pred_col_name = potential_cols[0]\n",
        "            print(f\"⚠️ Warning: using prediction column '{pred_col_name}'. Verify this is correct.\")\n",
        "        else:\n",
        "            print(\"❌ Error: could not find a prediction column in the forecast output.\")\n",
        "            pred_col_name = None\n",
        "\n",
        "    # 3.2 Inverse‐transform if we have a column\n",
        "    if pred_col_name:\n",
        "        # scaler was fit on train_df[[target_column]] earlier\n",
        "        predicted_scaled = fcst_df_scaled[[pred_col_name]]\n",
        "        predicted_original = scaler.inverse_transform(predicted_scaled)\n",
        "\n",
        "        # Build a tidy DataFrame of the results\n",
        "        predictions_df = pd.DataFrame({\n",
        "            'ds': fcst_df_scaled['ds'],\n",
        "            'predicted_temp': predicted_original.flatten()\n",
        "        }).set_index('ds')\n",
        "\n",
        "        print(\"\\n✅ Inverse‑transformed predictions (original temperature scale):\")\n",
        "        print(predictions_df.head())\n",
        "    else:\n",
        "        predictions_df = None\n",
        "else:\n",
        "    print(\"\\nSkipping inverse transform due to forecast error.\")\n",
        "    predictions_df = None\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tbzRtfJzIE9O",
        "outputId": "4f04a13c-b2f6-4ffb-caac-ec37db746999"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "⚠️ Warning: using prediction column 'TimeGPT'. Verify this is correct.\n",
            "\n",
            "✅ Inverse‑transformed predictions (original temperature scale):\n",
            "                     predicted_temp\n",
            "ds                                 \n",
            "2018-10-23 02:44:00       35.486350\n",
            "2018-10-23 02:46:00       35.571297\n",
            "2018-10-23 02:48:00       35.581866\n",
            "2018-10-23 02:50:00       35.801123\n",
            "2018-10-23 02:52:00       35.682120\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Phase 3: Feature Engineering — Adding Custom Features\n",
        "import numpy as np\n",
        "\n",
        "print(\"Adding custom features...\")\n",
        "\n",
        "# Feature 1: Hour of Day (0–23)\n",
        "df['hour'] = df.index.hour\n",
        "\n",
        "# (Optional) If you want cyclical encoding instead of a raw hour:\n",
        "# df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)\n",
        "# df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)\n",
        "\n",
        "# Feature 2: Temperature Lag (1 time step back)\n",
        "lag_steps = 1\n",
        "df[f'temp_lag_{lag_steps}'] = df[target_column].shift(lag_steps)\n",
        "\n",
        "# Drop rows with any NaNs (just the first row, due to the lag)\n",
        "initial_rows = len(df)\n",
        "df = df.dropna()\n",
        "dropped = initial_rows - len(df)\n",
        "print(f\"Dropped {dropped} rows with NaNs after creating lag features.\")\n",
        "\n",
        "# Inspect the new features\n",
        "print(\"\\nDataFrame with new features:\")\n",
        "print(df[[target_column, f'temp_lag_{lag_steps}', 'hour']].head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iNdmYQngInds",
        "outputId": "3249be22-d216-4232-f20b-62ba138105fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Adding custom features...\n",
            "Dropped 1 rows with NaNs after creating lag features.\n",
            "\n",
            "DataFrame with new features:\n",
            "                     temp  temp_lag_1  hour\n",
            "noted_date                                 \n",
            "2018-07-28 07:06:00    31        31.0     7\n",
            "2018-07-28 07:06:00    31        31.0     7\n",
            "2018-07-28 07:07:00    31        31.0     7\n",
            "2018-07-28 07:07:00    31        31.0     7\n",
            "2018-07-28 07:07:00    31        31.0     7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# 2. Re‑Split and Re‑Scale Data with Features\n",
        "print(\"\\nRe‑splitting data after adding features...\")\n",
        "\n",
        "# Re‑calculate split index based on the (possibly smaller) df\n",
        "split_index_fe = int(len(df) * split_ratio)\n",
        "\n",
        "# Chronological split\n",
        "train_df_fe = df.iloc[:split_index_fe].copy()\n",
        "test_df_fe  = df.iloc[split_index_fe:].copy()\n",
        "\n",
        "print(f\"Training set with features shape: {train_df_fe.shape}\")\n",
        "print(f\"Testing set with features shape:  {test_df_fe.shape}\")\n",
        "\n",
        "print(\"\\nRe‑scaling target variable ('temp') after adding features...\")\n",
        "\n",
        "# Initialize a new scaler\n",
        "scaler_fe = MinMaxScaler()\n",
        "scaled_column_name_fe = target_column + '_scaled'\n",
        "\n",
        "# Fit on training target and transform both sets\n",
        "train_df_fe[scaled_column_name_fe] = scaler_fe.fit_transform(train_df_fe[[target_column]])\n",
        "test_df_fe[scaled_column_name_fe]  = scaler_fe.transform(test_df_fe[[target_column]])\n",
        "\n",
        "print(\"Example scaled values in new training data:\")\n",
        "print(train_df_fe[[target_column, scaled_column_name_fe, 'hour', 'temp_lag_1']].head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "91v0dtSlIwjf",
        "outputId": "b20eaa40-579d-4688-c169-a26bf1e26a26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Re‑splitting data after adding features...\n",
            "Training set with features shape: (78084, 6)\n",
            "Testing set with features shape:  (19521, 6)\n",
            "\n",
            "Re‑scaling target variable ('temp') after adding features...\n",
            "Example scaled values in new training data:\n",
            "                     temp  temp_scaled  hour  temp_lag_1\n",
            "noted_date                                              \n",
            "2018-07-28 07:06:00    31     0.310345     7        31.0\n",
            "2018-07-28 07:06:00    31     0.310345     7        31.0\n",
            "2018-07-28 07:07:00    31     0.310345     7        31.0\n",
            "2018-07-28 07:07:00    31     0.310345     7        31.0\n",
            "2018-07-28 07:07:00    31     0.310345     7        31.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Phase 3.3: Prepare Data with Features for Nixtla\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# 1️⃣ Prepare target DataFrame (y)\n",
        "y_column_nixtla_fe = scaled_column_name_fe  # e.g. 'temp_scaled'\n",
        "train_nixtla_df_fe = (\n",
        "    train_df_fe\n",
        "    .reset_index()\n",
        "    .rename(columns={'noted_date': 'ds', y_column_nixtla_fe: 'y'})\n",
        ")\n",
        "train_nixtla_df_fe['unique_id'] = 'sensor_1'\n",
        "\n",
        "train_nixtla_input_fe = train_nixtla_df_fe[['unique_id', 'ds', 'y']]\n",
        "\n",
        "print(\"\\nPrepared target data ('y') for Nixtla with features:\")\n",
        "print(train_nixtla_input_fe.head())\n",
        "\n",
        "# 2️⃣ Prepare exogenous features DataFrame (X_df)\n",
        "#    Must include both training period and the future horizon\n",
        "features_for_nixtla = pd.concat([\n",
        "    train_df_fe[['hour', 'temp_lag_1']],\n",
        "    test_df_fe [['hour', 'temp_lag_1']]\n",
        "])\n",
        "\n",
        "features_for_nixtla = (\n",
        "    features_for_nixtla\n",
        "    .reset_index()\n",
        "    .rename(columns={'noted_date': 'ds'})\n",
        ")\n",
        "features_for_nixtla['unique_id'] = 'sensor_1'\n",
        "\n",
        "# Reorder columns as Nixtla expects\n",
        "X_df_nixtla = features_for_nixtla[['unique_id', 'ds', 'hour', 'temp_lag_1']]\n",
        "\n",
        "print(\"\\nPrepared features data ('X_df') for Nixtla:\")\n",
        "print(X_df_nixtla.head())\n",
        "print(f\"Shape of X_df: {X_df_nixtla.shape} (should = train_len + horizon)\")\n",
        "\n",
        "# 3️⃣ Sanity check\n",
        "expected_len = len(train_nixtla_input_fe) + horizon\n",
        "if len(X_df_nixtla) != expected_len:\n",
        "    print(\n",
        "        f\"⚠️ Warning: X_df length ({len(X_df_nixtla)}) != \"\n",
        "        f\"train ({len(train_nixtla_input_fe)}) + horizon ({horizon}) = {expected_len}.\"\n",
        "    )\n",
        "else:\n",
        "    print(\"✅ Feature DataFrame length is correct.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JsbBQqZII28n",
        "outputId": "2aa5591e-3281-471f-f95c-04bf3d850e97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Prepared target data ('y') for Nixtla with features:\n",
            "  unique_id                  ds         y\n",
            "0  sensor_1 2018-07-28 07:06:00  0.310345\n",
            "1  sensor_1 2018-07-28 07:06:00  0.310345\n",
            "2  sensor_1 2018-07-28 07:07:00  0.310345\n",
            "3  sensor_1 2018-07-28 07:07:00  0.310345\n",
            "4  sensor_1 2018-07-28 07:07:00  0.310345\n",
            "\n",
            "Prepared features data ('X_df') for Nixtla:\n",
            "  unique_id                  ds  hour  temp_lag_1\n",
            "0  sensor_1 2018-07-28 07:06:00     7        31.0\n",
            "1  sensor_1 2018-07-28 07:06:00     7        31.0\n",
            "2  sensor_1 2018-07-28 07:07:00     7        31.0\n",
            "3  sensor_1 2018-07-28 07:07:00     7        31.0\n",
            "4  sensor_1 2018-07-28 07:07:00     7        31.0\n",
            "Shape of X_df: (97605, 4) (should = train_len + horizon)\n",
            "⚠️ Warning: X_df length (97605) != train (78084) + horizon (100) = 78184.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model='timegpt-1-long-horizon'\n"
      ],
      "metadata": {
        "id": "LCIussk-JRa5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# 1️⃣ Build a feature‑enhanced DataFrame (df_feat)\n",
        "df_feat = df.copy()\n",
        "df_feat.loc[:, 'hour'] = df_feat.index.hour\n",
        "df_feat.loc[:, 'temp_lag_1'] = df_feat['temp'].shift(1)\n",
        "df_feat = df_feat.dropna()  # drop the first row (NaN lag)\n",
        "\n",
        "# 2️⃣ Extract only the numeric columns you need, then scale 'temp'\n",
        "numeric_feats = df_feat[['temp', 'hour', 'temp_lag_1']].copy()\n",
        "\n",
        "scaler = MinMaxScaler()\n",
        "numeric_feats.loc[:, 'temp_scaled'] = scaler.fit_transform(numeric_feats[['temp']])\n",
        "\n",
        "# 3️⃣ Resample on a perfect 2‑minute grid, then fill gaps\n",
        "resampled = (\n",
        "    numeric_feats\n",
        "    .resample('2min')\n",
        "    .mean()   # collapse duplicates & create one row per 2min\n",
        "    .ffill()  # fill forward\n",
        "    .bfill()  # fill backward if any gaps at start/end\n",
        ")\n",
        "\n",
        "# 4️⃣ Split into train/test\n",
        "split_pt = int(len(resampled) * split_ratio)\n",
        "train_r = resampled.iloc[:split_pt]\n",
        "test_r  = resampled.iloc[split_pt:]\n",
        "horizon = len(test_r)\n",
        "\n",
        "# 5️⃣ Prepare Nixtla inputs\n",
        "# Include exogenous features in train_nixtla_input_fe\n",
        "train_nixtla_input_fe = (\n",
        "    train_r[['temp_scaled', 'hour', 'temp_lag_1']]  # Include exogenous features\n",
        "    .reset_index()\n",
        "    .rename(columns={'noted_date': 'ds', 'temp_scaled': 'y'})\n",
        ")\n",
        "train_nixtla_input_fe['unique_id'] = 'sensor_1'\n",
        "\n",
        "# X_df_nixtla should now only contain future exogenous features\n",
        "X_df_nixtla = (\n",
        "    test_r[['hour', 'temp_lag_1']]  # Only future exogenous features\n",
        "    .reset_index()\n",
        "    .rename(columns={'noted_date': 'ds'})\n",
        ")\n",
        "X_df_nixtla['unique_id'] = 'sensor_1'\n",
        "\n",
        "# 6️⃣ Forecast with features\n",
        "fcst_df_scaled_fe = nixtla_client.forecast(\n",
        "    df=train_nixtla_input_fe,\n",
        "    X_df=X_df_nixtla,\n",
        "    h=horizon,\n",
        "    freq='2min',\n",
        "    model='timegpt-1',\n",
        "    level=[80, 95]\n",
        ")\n",
        "\n",
        "print(fcst_df_scaled_fe.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iLgIldWxJ8mx",
        "outputId": "3aeb2261-31ac-41e7-a5df-dbe2c929bb60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:nixtla.nixtla_client:The specified horizon \"h\" exceeds the model horizon, this may lead to less accurate forecasts. Please consider using a smaller horizon.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  unique_id                  ds   TimeGPT  TimeGPT-hi-80  TimeGPT-hi-95  \\\n",
            "0  sensor_1 2018-11-11 18:38:00  0.669985       0.687800       0.780294   \n",
            "1  sensor_1 2018-11-11 18:40:00  0.668583       0.695836       0.827398   \n",
            "2  sensor_1 2018-11-11 18:42:00  0.667447       0.699607       0.843551   \n",
            "3  sensor_1 2018-11-11 18:44:00  0.666609       0.704496       0.868910   \n",
            "4  sensor_1 2018-11-11 18:46:00  0.665887       0.709949       0.870831   \n",
            "\n",
            "   TimeGPT-lo-80  TimeGPT-lo-95  \n",
            "0       0.652169       0.559675  \n",
            "1       0.641331       0.509769  \n",
            "2       0.635287       0.491342  \n",
            "3       0.628722       0.464308  \n",
            "4       0.621825       0.460942  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if fcst_df_scaled_fe is not None:\n",
        "    # Identify the column for predictions\n",
        "    pred_col_name_fe = 'TimeGPT'  # Adjust this based on your actual column name\n",
        "\n",
        "    # Check if the prediction column exists\n",
        "    if pred_col_name_fe not in fcst_df_scaled_fe.columns:\n",
        "        # Find the first column that contains the predictions (avoid the ones with '-lo-' or '-hi-' in their names)\n",
        "        potential_cols_fe = [c for c in fcst_df_scaled_fe.columns if c not in ['unique_id', 'ds']\n",
        "                             and '-lo-' not in c and '-hi-' not in c]\n",
        "\n",
        "        # If there are any valid columns\n",
        "        if potential_cols_fe:\n",
        "            pred_col_name_fe = potential_cols_fe[0]\n",
        "            print(f\"Warning: Using prediction column '{pred_col_name_fe}'.\")\n",
        "        else:\n",
        "            print(\"Error: Could not find prediction column.\")\n",
        "            pred_col_name_fe = None\n",
        "\n",
        "    # If the prediction column is found, inverse-transform it\n",
        "    if pred_col_name_fe:\n",
        "        predicted_values_fe = scaler_fe.inverse_transform(fcst_df_scaled_fe[[pred_col_name_fe]])\n",
        "\n",
        "        # Create a DataFrame for predictions in the original scale\n",
        "        predictions_df_fe = pd.DataFrame({\n",
        "            'ds': fcst_df_scaled_fe['ds'],\n",
        "            'predicted_temp': predicted_values_fe.flatten()\n",
        "        }).set_index('ds')\n",
        "\n",
        "        print(\"\\nInverse transformed predictions (with features):\")\n",
        "        print(predictions_df_fe.head())\n",
        "    else:\n",
        "        predictions_df_fe = None\n",
        "else:\n",
        "    print(\"\\nSkipping inverse transform due to forecast error.\")\n",
        "    predictions_df_fe = None\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q6RHnAlfKl-P",
        "outputId": "6045f567-e19a-462b-c582-319952bc63f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Inverse transformed predictions (with features):\n",
            "                     predicted_temp\n",
            "ds                                 \n",
            "2018-11-11 18:38:00       41.429559\n",
            "2018-11-11 18:40:00       41.388922\n",
            "2018-11-11 18:42:00       41.355957\n",
            "2018-11-11 18:44:00       41.331661\n",
            "2018-11-11 18:46:00       41.310711\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if predictions_df_fe is not None:\n",
        "    # Step 1: Use the test set created WITH features\n",
        "    actual_vs_pred_df = test_df_fe[[target_column]].copy()  # Get actual values from test data\n",
        "    actual_vs_pred_df = actual_vs_pred_df.join(predictions_df_fe[['predicted_temp']], how='inner')  # Join with predicted values\n",
        "\n",
        "    # Step 2: Drop rows where predictions might be missing (e.g., NaNs)\n",
        "    initial_len = len(actual_vs_pred_df)\n",
        "    actual_vs_pred_df = actual_vs_pred_df.dropna()  # Remove rows with missing values in either column\n",
        "\n",
        "    if len(actual_vs_pred_df) < initial_len:\n",
        "        print(f\"Warning: Dropped {initial_len - len(actual_vs_pred_df)} rows with NaNs after joining.\")\n",
        "        print(\"\\nAligned actual vs. predicted temperatures (with features):\")\n",
        "        print(actual_vs_pred_df.head())  # Display a few rows of the alignment\n",
        "    else:\n",
        "        print(\"\\nAll rows are aligned with no missing predictions.\")\n",
        "        print(\"\\nAligned actual vs. predicted temperatures (with features):\")\n",
        "        print(actual_vs_pred_df.head())  # Display the aligned data\n",
        "\n",
        "else:\n",
        "    print(\"\\nSkipping alignment due to forecast error.\")\n",
        "    actual_vs_pred_df = None\n",
        "\n",
        "# Output the final comparison (if available)\n",
        "if actual_vs_pred_df is not None:\n",
        "    print(\"\\nFinal Aligned Actual vs. Predicted Temperatures:\")\n",
        "    print(actual_vs_pred_df.head())\n",
        "else:\n",
        "    print(\"\\nNo valid predictions to align with actual data.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cnxnk4nALVur",
        "outputId": "c8538d0a-03a5-401c-d797-04521ae9b383"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "All rows are aligned with no missing predictions.\n",
            "\n",
            "Aligned actual vs. predicted temperatures (with features):\n",
            "                     temp  predicted_temp\n",
            "2018-11-17 17:48:00    31       31.067558\n",
            "2018-11-17 17:56:00    30       45.655203\n",
            "2018-11-17 17:58:00    31       45.655219\n",
            "2018-11-17 18:00:00    30       44.606174\n",
            "2018-11-17 18:14:00    30       39.561031\n",
            "\n",
            "Final Aligned Actual vs. Predicted Temperatures:\n",
            "                     temp  predicted_temp\n",
            "2018-11-17 17:48:00    31       31.067558\n",
            "2018-11-17 17:56:00    30       45.655203\n",
            "2018-11-17 17:58:00    31       45.655219\n",
            "2018-11-17 18:00:00    30       44.606174\n",
            "2018-11-17 18:14:00    30       39.561031\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(actual_vs_pred_df.index, actual_vs_pred_df['temp'], label='Actual Temp', color='blue')\n",
        "plt.plot(actual_vs_pred_df.index, actual_vs_pred_df['predicted_temp'], label='Predicted Temp', color='red')\n",
        "plt.title('Actual vs. Predicted Temperatures')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Temperature (°C)')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "o1mQKFOpL-Fi",
        "outputId": "2494306a-e027-4905-90fc-2f72610af6c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
        "\n",
        "# Compute MAE, MSE, and R-squared\n",
        "mae = mean_absolute_error(actual_vs_pred_df['temp'], actual_vs_pred_df['predicted_temp'])\n",
        "mse = mean_squared_error(actual_vs_pred_df['temp'], actual_vs_pred_df['predicted_temp'])\n",
        "rmse = np.sqrt(mse)  # RMSE is the square root of MSE\n",
        "r2 = r2_score(actual_vs_pred_df['temp'], actual_vs_pred_df['predicted_temp'])\n",
        "\n",
        "print(f\"MAE: {mae}\")\n",
        "print(f\"RMSE: {rmse}\")\n",
        "print(f\"R-squared: {r2}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Au8shOKIMVbs",
        "outputId": "71bf0228-6a3a-4c70-f378-67a7cc04378d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAE: 2.515222996095453\n",
            "RMSE: 3.8445509842596235\n",
            "R-squared: 0.3267242216665943\n"
          ]
        }
      ]
    },
    {
      "source": [
        "from sklearn.model_selection import TimeSeriesSplit\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import numpy as np\n",
        "\n",
        "print(\"\\n--- Rolling-Origin Cross-Validation (Conceptual Structure) ---\")\n",
        "\n",
        "# Prepare the dataset for cross-validation\n",
        "data_for_cv = df.copy()\n",
        "scaler_cv = MinMaxScaler()\n",
        "data_for_cv[scaled_column_name_fe] = scaler_cv.fit_transform(data_for_cv[[target_column]])\n",
        "# Reset index to ensure 'ds' column is properly formatted and preserve it during splitting\n",
        "data_for_cv = data_for_cv.reset_index()\n",
        "\n",
        "n_splits = 5  # Number of splits (folds)\n",
        "tscv = TimeSeriesSplit(n_splits=n_splits, test_size=horizon)  # TimeSeriesSplit with horizon\n",
        "all_cv_preds = []\n",
        "all_cv_actuals = []\n",
        "split_num = 0\n",
        "\n",
        "print(f\"Setting up {n_splits} splits for cross-validation.\")\n",
        "print(\"NOTE: This requires running Nixtla forecast inside the loop - can be slow!\")\n",
        "\n",
        "# Cross-validation loop\n",
        "for train_index, test_index in tscv.split(data_for_cv):\n",
        "    split_num += 1\n",
        "    print(f\"\\n--- CV Split {split_num}/{n_splits} ---\")\n",
        "\n",
        "    # Train and test sets for the current fold\n",
        "    cv_train_full = data_for_cv.iloc[train_index].copy() # create copies\n",
        "    cv_test_full = data_for_cv.iloc[test_index].copy()\n",
        "\n",
        "    print(f\" Train period: {cv_train_full['noted_date'].min()} to {cv_train_full['noted_date'].max()} ({len(cv_train_full)} points)\") # Use 'noted_date'\n",
        "    print(f\" Test period: {cv_test_full['noted_date'].min()} to {cv_test_full['noted_date'].max()} ({len(cv_test_full)} points)\") # Use 'noted_date'"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oWdCSkWXPgvg",
        "outputId": "41a8426b-4ef0-4188-eef0-9923fb8ec523"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Rolling-Origin Cross-Validation (Conceptual Structure) ---\n",
            "Setting up 5 splits for cross-validation.\n",
            "NOTE: This requires running Nixtla forecast inside the loop - can be slow!\n",
            "\n",
            "--- CV Split 1/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-08-18 14:29:00 (1770 points)\n",
            " Test period: 2018-08-18 14:31:00 to 2018-09-10 16:39:00 (19167 points)\n",
            "\n",
            "--- CV Split 2/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-09-10 16:39:00 (20937 points)\n",
            " Test period: 2018-09-10 16:39:00 to 2018-09-14 04:22:00 (19167 points)\n",
            "\n",
            "--- CV Split 3/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-09-14 04:22:00 (40104 points)\n",
            " Test period: 2018-09-14 04:26:00 to 2018-10-17 15:52:00 (19167 points)\n",
            "\n",
            "--- CV Split 4/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-10-17 15:52:00 (59271 points)\n",
            " Test period: 2018-10-17 15:52:00 to 2018-10-23 18:59:00 (19167 points)\n",
            "\n",
            "--- CV Split 5/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-10-23 18:59:00 (78438 points)\n",
            " Test period: 2018-10-23 19:01:00 to 2018-12-08 09:30:00 (19167 points)\n"
          ]
        }
      ]
    },
    {
      "source": [
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "from nixtla import NixtlaClient  # Make sure NixtlaClient is imported\n",
        "\n",
        "# ... (rest of your code) ...\n",
        "\n",
        "# Cross-validation loop (continued from the above)\n",
        "for train_index, test_index in tscv.split(data_for_cv):\n",
        "    split_num += 1\n",
        "    print(f\"\\n--- CV Split {split_num}/{n_splits} ---\")\n",
        "\n",
        "    # Train and test sets for the current fold\n",
        "    cv_train_full = data_for_cv.iloc[train_index].copy()\n",
        "    cv_test_full = data_for_cv.iloc[test_index].copy()\n",
        "\n",
        "    # Prepare Nixtla model with cv_train_full and make predictions for cv_test_full\n",
        "    print(f\" Train period: {cv_train_full['noted_date'].min()} to {cv_train_full['noted_date'].max()} ({len(cv_train_full)} points)\")\n",
        "    print(f\" Test period: {cv_test_full['noted_date'].min()} to {cv_test_full['noted_date'].max()} ({len(cv_test_full)} points)\")\n",
        "\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "from nixtla import NixtlaClient  # Make sure NixtlaClient is imported\n",
        "\n",
        "# ... (rest of your code) ...\n",
        "\n",
        "# Cross-validation loop (continued from the above)\n",
        "for train_index, test_index in tscv.split(data_for_cv):\n",
        "    split_num += 1\n",
        "    print(f\"\\n--- CV Split {split_num}/{n_splits} ---\")\n",
        "\n",
        "    # Train and test sets for the current fold\n",
        "    cv_train_full = data_for_cv.iloc[train_index].copy()\n",
        "    cv_test_full = data_for_cv.iloc[test_index].copy()\n",
        "\n",
        "    # Prepare Nixtla model with cv_train_full and make predictions for cv_test_full\n",
        "    print(f\" Train period: {cv_train_full['noted_date'].min()} to {cv_train_full['noted_date'].max()} ({len(cv_train_full)} points)\")\n",
        "    print(f\" Test period: {cv_test_full['noted_date'].min()} to {cv_test_full['noted_date'].max()} ({len(cv_test_full)} points)\")\n",
        "\n",
        "    # --- Nixtla forecast ---\n",
        "    # Prepare training data for Nixtla\n",
        "    train_nixtla_input_cv = cv_train_full[['noted_date', scaled_column_name_fe]].rename(columns={'noted_date': 'ds', scaled_column_name_fe: 'y'})"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YezCxg8hP0L7",
        "outputId": "34efb85e-2fad-43f8-f7ad-c65253615710"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- CV Split 7/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-08-18 14:29:00 (1770 points)\n",
            " Test period: 2018-08-18 14:31:00 to 2018-09-10 16:39:00 (19167 points)\n",
            "\n",
            "--- CV Split 8/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-09-10 16:39:00 (20937 points)\n",
            " Test period: 2018-09-10 16:39:00 to 2018-09-14 04:22:00 (19167 points)\n",
            "\n",
            "--- CV Split 9/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-09-14 04:22:00 (40104 points)\n",
            " Test period: 2018-09-14 04:26:00 to 2018-10-17 15:52:00 (19167 points)\n",
            "\n",
            "--- CV Split 10/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-10-17 15:52:00 (59271 points)\n",
            " Test period: 2018-10-17 15:52:00 to 2018-10-23 18:59:00 (19167 points)\n",
            "\n",
            "--- CV Split 11/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-10-23 18:59:00 (78438 points)\n",
            " Test period: 2018-10-23 19:01:00 to 2018-12-08 09:30:00 (19167 points)\n",
            "\n",
            "--- CV Split 12/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-08-18 14:29:00 (1770 points)\n",
            " Test period: 2018-08-18 14:31:00 to 2018-09-10 16:39:00 (19167 points)\n",
            "\n",
            "--- CV Split 13/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-09-10 16:39:00 (20937 points)\n",
            " Test period: 2018-09-10 16:39:00 to 2018-09-14 04:22:00 (19167 points)\n",
            "\n",
            "--- CV Split 14/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-09-14 04:22:00 (40104 points)\n",
            " Test period: 2018-09-14 04:26:00 to 2018-10-17 15:52:00 (19167 points)\n",
            "\n",
            "--- CV Split 15/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-10-17 15:52:00 (59271 points)\n",
            " Test period: 2018-10-17 15:52:00 to 2018-10-23 18:59:00 (19167 points)\n",
            "\n",
            "--- CV Split 16/5 ---\n",
            " Train period: 2018-07-28 07:06:00 to 2018-10-23 18:59:00 (78438 points)\n",
            " Test period: 2018-10-23 19:01:00 to 2018-12-08 09:30:00 (19167 points)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def create_sequences(data, seq_length):\n",
        "    \"\"\"Creates overlapping sequences from time series data.\"\"\"\n",
        "    xs = []\n",
        "    for i in range(len(data) - seq_length + 1):  # +1 to include last possible sequence\n",
        "        x = data[i:(i + seq_length)]\n",
        "        xs.append(x)\n",
        "    return np.array(xs)\n",
        "\n",
        "# Define sequence length (related to patterns in your data)\n",
        "sequence_length = 24  # Example: Use 24 data points per sequence\n",
        "if sequence_length > len(train_df_fe):\n",
        "    sequence_length = len(train_df_fe) // 4  # Adjust if train data is too short\n",
        "\n",
        "# Use the SCALED temperature data from the training set\n",
        "scaled_train_data_fe = train_df_fe[scaled_column_name_fe].values\n",
        "\n",
        "# Create sequences\n",
        "vae_train_sequences = create_sequences(scaled_train_data_fe, sequence_length)\n",
        "\n",
        "# Reshape for VAE input: (number_of_sequences, sequence_length, num_features)\n",
        "# Here, num_features is 1 because we only use scaled temp for VAE input\n",
        "vae_train_sequences = vae_train_sequences.reshape((-1, sequence_length, 1))\n",
        "\n",
        "print(f\"\\nCreated {len(vae_train_sequences)} sequences for VAE training.\")\n",
        "print(f\"Shape of VAE training data: {vae_train_sequences.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IcsLCV7oY9Io",
        "outputId": "c92165bc-b202-4210-f44c-d595bdccbc11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Created 78061 sequences for VAE training.\n",
            "Shape of VAE training data: (78061, 24, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, Model\n",
        "from tensorflow.keras import backend as K\n",
        "\n",
        "# Dimensions\n",
        "latent_dim = 8  # Size of the latent space (can be tuned)\n",
        "input_shape = (sequence_length, 1)  # Shape of one input sequence\n",
        "\n",
        "# --- Encoder Network ---\n",
        "encoder_inputs = layers.Input(shape=input_shape)\n",
        "\n",
        "# LSTM layers are good for sequential data like temperature\n",
        "x = layers.LSTM(64, activation='relu', return_sequences=True)(encoder_inputs)\n",
        "x = layers.LSTM(32, activation='relu')(x)\n",
        "x = layers.Dense(16, activation='relu')(x)\n",
        "\n",
        "# VAE specific: Output mean and log-variance for the latent space distribution\n",
        "z_mean = layers.Dense(latent_dim, name='z_mean')(x)\n",
        "z_log_var = layers.Dense(latent_dim, name='z_log_var')(x)\n",
        "\n",
        "# Sampling function (Reparameterization Trick)\n",
        "def sampling(args):\n",
        "    z_mean, z_log_var = args\n",
        "    batch = K.shape(z_mean)[0]\n",
        "    dim = K.int_shape(z_mean)[1]\n",
        "\n",
        "    # Generate random numbers from standard normal distribution\n",
        "    epsilon = K.random_normal(shape=(batch, dim))\n",
        "\n",
        "    # Combine mean, log_var, and epsilon to sample from the learned distribution\n",
        "    return z_mean + K.exp(0.5 * z_log_var) * epsilon\n",
        "\n",
        "# Create the sampling layer\n",
        "z = layers.Lambda(sampling, output_shape=(latent_dim,), name='z')([z_mean, z_log_var])\n",
        "\n",
        "# Instantiate the encoder model\n",
        "encoder = Model(encoder_inputs, [z_mean, z_log_var, z], name='encoder')\n",
        "print(\"\\n--- Encoder Summary ---\")\n",
        "encoder.summary(line_length=100)\n",
        "\n",
        "# --- Decoder Network ---\n",
        "latent_inputs = layers.Input(shape=(latent_dim,))\n",
        "\n",
        "# Dense layer to start decoding\n",
        "x = layers.Dense(16, activation='relu')(latent_inputs)\n",
        "\n",
        "# Repeat the latent vector for each step in the output sequence\n",
        "x = layers.RepeatVector(sequence_length)(x)\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, Model\n",
        "from tensorflow.keras import backend as K\n",
        "\n",
        "# Dimensions\n",
        "latent_dim = 8  # Size of the latent space (can be tuned)\n",
        "input_shape = (sequence_length, 1)  # Shape of one input sequence\n",
        "\n",
        "# --- Encoder Network ---\n",
        "encoder_inputs = layers.Input(shape=input_shape)\n",
        "\n",
        "# LSTM layers are good for sequential data like temperature\n",
        "x = layers.LSTM(64, activation='relu', return_sequences=True)(encoder_inputs)\n",
        "x = layers.LSTM(32, activation='relu')(x)\n",
        "x = layers.Dense(16, activation='relu')(x)\n",
        "\n",
        "# VAE specific: Output mean and log-variance for the latent space distribution\n",
        "z_mean = layers.Dense(latent_dim, name='z_mean')(x)\n",
        "z_log_var = layers.Dense(latent_dim, name='z_log_var')(x)\n",
        "\n",
        "# Sampling function (Reparameterization Trick)\n",
        "def sampling(args):\n",
        "    z_mean, z_log_var = args\n",
        "    batch = K.shape(z_mean)[0]\n",
        "    dim = K.int_shape(z_mean)[1]\n",
        "\n",
        "    # Generate random numbers from standard normal distribution\n",
        "    epsilon = K.random_normal(shape=(batch, dim))\n",
        "\n",
        "    # Combine mean, log_var, and epsilon to sample from the learned distribution\n",
        "    return z_mean + K.exp(0.5 * z_log_var) * epsilon\n",
        "\n",
        "# Create the sampling layer\n",
        "z = layers.Lambda(sampling, output_shape=(latent_dim,), name='z')([z_mean, z_log_var])\n",
        "\n",
        "# Instantiate the encoder model\n",
        "encoder = Model(encoder_inputs, [z_mean, z_log_var, z], name='encoder')\n",
        "print(\"\\n--- Encoder Summary ---\")\n",
        "encoder.summary(line_length=100)\n",
        "\n",
        "# --- Decoder Network ---\n",
        "latent_inputs = layers.Input(shape=(latent_dim,))\n",
        "\n",
        "# Dense layer to start decoding\n",
        "x = layers.Dense(16, activation='relu')(latent_inputs)\n",
        "\n",
        "# Repeat the latent vector for each step in the output sequence\n",
        "x = layers.RepeatVector(sequence_length)(x)\n",
        "\n",
        "# LSTM layers to generate the sequence\n",
        "x = layers.LSTM(32, activation='relu', return_sequences=True)(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "s7zzn9qnZocJ",
        "outputId": "dfadd7c9-9515-410d-e480-b227d0ec6f19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Encoder Summary ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"encoder\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"encoder\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape           \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to           \u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_20 (\u001b[38;5;33mInputLayer\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m1\u001b[0m)           │              \u001b[38;5;34m0\u001b[0m │ -                       │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ lstm_39 (\u001b[38;5;33mLSTM\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │         \u001b[38;5;34m16,896\u001b[0m │ input_layer_20[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ lstm_40 (\u001b[38;5;33mLSTM\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)              │         \u001b[38;5;34m12,416\u001b[0m │ lstm_39[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]           │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ dense_34 (\u001b[38;5;33mDense\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)              │            \u001b[38;5;34m528\u001b[0m │ lstm_40[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]           │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z_mean (\u001b[38;5;33mDense\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)               │            \u001b[38;5;34m136\u001b[0m │ dense_34[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z_log_var (\u001b[38;5;33mDense\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)               │            \u001b[38;5;34m136\u001b[0m │ dense_34[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z (\u001b[38;5;33mLambda\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)               │              \u001b[38;5;34m0\u001b[0m │ z_mean[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],           │\n",
              "│                             │                         │                │ z_log_var[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "└─────────────────────────────┴─────────────────────────┴────────────────┴─────────────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                </span>┃<span style=\"font-weight: bold\"> Output Shape            </span>┃<span style=\"font-weight: bold\">        Param # </span>┃<span style=\"font-weight: bold\"> Connected to            </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_20 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                       │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ lstm_39 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │         <span style=\"color: #00af00; text-decoration-color: #00af00\">16,896</span> │ input_layer_20[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ lstm_40 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)              │         <span style=\"color: #00af00; text-decoration-color: #00af00\">12,416</span> │ lstm_39[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]           │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ dense_34 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │ lstm_40[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]           │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z_mean (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)               │            <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │ dense_34[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z_log_var (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)               │            <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │ dense_34[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)               │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ z_mean[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],           │\n",
              "│                             │                         │                │ z_log_var[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "└─────────────────────────────┴─────────────────────────┴────────────────┴─────────────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m30,112\u001b[0m (117.62 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">30,112</span> (117.62 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m30,112\u001b[0m (117.62 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">30,112</span> (117.62 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Encoder Summary ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"encoder\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"encoder\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape           \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to           \u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_22 (\u001b[38;5;33mInputLayer\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m1\u001b[0m)           │              \u001b[38;5;34m0\u001b[0m │ -                       │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ lstm_41 (\u001b[38;5;33mLSTM\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │         \u001b[38;5;34m16,896\u001b[0m │ input_layer_22[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ lstm_42 (\u001b[38;5;33mLSTM\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)              │         \u001b[38;5;34m12,416\u001b[0m │ lstm_41[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]           │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ dense_36 (\u001b[38;5;33mDense\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)              │            \u001b[38;5;34m528\u001b[0m │ lstm_42[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]           │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z_mean (\u001b[38;5;33mDense\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)               │            \u001b[38;5;34m136\u001b[0m │ dense_36[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z_log_var (\u001b[38;5;33mDense\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)               │            \u001b[38;5;34m136\u001b[0m │ dense_36[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z (\u001b[38;5;33mLambda\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)               │              \u001b[38;5;34m0\u001b[0m │ z_mean[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],           │\n",
              "│                             │                         │                │ z_log_var[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "└─────────────────────────────┴─────────────────────────┴────────────────┴─────────────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                </span>┃<span style=\"font-weight: bold\"> Output Shape            </span>┃<span style=\"font-weight: bold\">        Param # </span>┃<span style=\"font-weight: bold\"> Connected to            </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_22 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)           │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                       │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ lstm_41 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │         <span style=\"color: #00af00; text-decoration-color: #00af00\">16,896</span> │ input_layer_22[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ lstm_42 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)              │         <span style=\"color: #00af00; text-decoration-color: #00af00\">12,416</span> │ lstm_41[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]           │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ dense_36 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">528</span> │ lstm_42[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]           │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z_mean (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)               │            <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │ dense_36[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z_log_var (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)               │            <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │ dense_36[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├─────────────────────────────┼─────────────────────────┼────────────────┼─────────────────────────┤\n",
              "│ z (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)               │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ z_mean[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],           │\n",
              "│                             │                         │                │ z_log_var[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "└─────────────────────────────┴─────────────────────────┴────────────────┴─────────────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m30,112\u001b[0m (117.62 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">30,112</span> (117.62 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m30,112\u001b[0m (117.62 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">30,112</span> (117.62 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "STEP 3"
      ],
      "metadata": {
        "id": "H3qp-p_WcsHf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- VAE Model ---\n",
        "# Make sure the VAE model is correctly defined\n",
        "vae = Model(encoder_inputs, decoder(encoder(encoder_inputs)[2]), name='vae')\n",
        "\n",
        "# --- Compile the VAE ---\n",
        "vae.compile(optimizer='adam', loss=vae_loss)  # Use the vae_loss function\n",
        "# If you encounter issues with vae_loss, you could temporarily use a basic loss function like MSE\n",
        "# vae.compile(optimizer='adam', loss='mse')  # Use 'mse' if appropriate\n",
        "\n",
        "# --- VAE Summary ---\n",
        "print(\"\\n--- VAE Summary ---\")\n",
        "vae.summary(line_length=100)\n",
        "\n",
        "# Now let's check whether the model is compiled and ready\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "G6Ew2HnGcJYo",
        "outputId": "2083999f-206e-4477-c8c7-e3840df6632a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- VAE Summary ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"vae\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"vae\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                              \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m          Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_22 (\u001b[38;5;33mInputLayer\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │                 \u001b[38;5;34m0\u001b[0m │\n",
              "├────────────────────────────────────────────┼─────────────────────────────────┼───────────────────┤\n",
              "│ encoder (\u001b[38;5;33mFunctional\u001b[0m)                       │ [(\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m), (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m), (\u001b[38;5;45mNone\u001b[0m,   │            \u001b[38;5;34m30,112\u001b[0m │\n",
              "│                                            │ \u001b[38;5;34m8\u001b[0m)]                             │                   │\n",
              "├────────────────────────────────────────────┼─────────────────────────────────┼───────────────────┤\n",
              "│ decoder (\u001b[38;5;33mFunctional\u001b[0m)                       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │            \u001b[38;5;34m22,081\u001b[0m │\n",
              "└────────────────────────────────────────────┴─────────────────────────────────┴───────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                               </span>┃<span style=\"font-weight: bold\"> Output Shape                    </span>┃<span style=\"font-weight: bold\">           Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_22 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │                 <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├────────────────────────────────────────────┼─────────────────────────────────┼───────────────────┤\n",
              "│ encoder (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)                       │ [(<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>), (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>), (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>,   │            <span style=\"color: #00af00; text-decoration-color: #00af00\">30,112</span> │\n",
              "│                                            │ <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)]                             │                   │\n",
              "├────────────────────────────────────────────┼─────────────────────────────────┼───────────────────┤\n",
              "│ decoder (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)                       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │            <span style=\"color: #00af00; text-decoration-color: #00af00\">22,081</span> │\n",
              "└────────────────────────────────────────────┴─────────────────────────────────┴───────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m52,193\u001b[0m (203.88 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">52,193</span> (203.88 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m52,193\u001b[0m (203.88 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">52,193</span> (203.88 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- VAE Loss Function ---\n",
        "def vae_loss(y_true, y_pred):\n",
        "    # Reconstruction loss (MSE or Binary Crossentropy)\n",
        "    reconstruction_loss = tf.reduce_mean(tf.square(y_true - y_pred))  # or use another metric\n",
        "\n",
        "    # KL divergence loss\n",
        "    kl_loss = -0.5 * tf.reduce_mean(\n",
        "        z_log_var - tf.square(z_mean) - tf.exp(z_log_var) + 1\n",
        "    )\n",
        "\n",
        "    # Total VAE loss\n",
        "    total_loss = reconstruction_loss + kl_loss\n",
        "    return total_loss\n"
      ],
      "metadata": {
        "id": "kfMgJVV1cP0U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Training data shape: {vae_train_sequences.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dnzM1DjocR4p",
        "outputId": "37073708-2c99-4889-cbc3-d3f24b8c5d9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training data shape: (78061, 24, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "def vae_loss(y_true, y_pred, z_mean, z_log_var):\n",
        "    # Reconstruction loss\n",
        "    reconstruction_loss = tf.reduce_mean(tf.square(y_true - y_pred), axis=(1, 2))  # Assuming MSE loss\n",
        "\n",
        "    # KL divergence loss\n",
        "    kl_loss = -0.5 * tf.reduce_mean(z_log_var - tf.square(z_mean) - tf.exp(z_log_var) + 1, axis=1)\n",
        "\n",
        "    # Total VAE loss\n",
        "    total_loss = reconstruction_loss + kl_loss\n",
        "\n",
        "    return total_loss\n"
      ],
      "metadata": {
        "id": "NKFM7xgGcf_Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "def vae_loss(y_true, y_pred, z_mean, z_log_var):\n",
        "    # Reconstruction loss: MSE between true and predicted values\n",
        "    reconstruction_loss = tf.reduce_mean(tf.square(y_true - y_pred), axis=(1, 2))  # MSE for sequences\n",
        "\n",
        "    # KL divergence loss: Measure the divergence between the learned distribution and the prior\n",
        "    kl_loss = -0.5 * tf.reduce_mean(z_log_var - tf.square(z_mean) - tf.exp(z_log_var) + 1, axis=1)\n",
        "\n",
        "    # Combine both losses: total VAE loss\n",
        "    total_loss = reconstruction_loss + kl_loss\n",
        "    return total_loss\n"
      ],
      "metadata": {
        "id": "onTl2Qggco7J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "def vae_loss(y_true, y_pred, z_mean, z_log_var):\n",
        "    # Reconstruction loss: MSE between true and predicted values\n",
        "    reconstruction_loss = tf.reduce_mean(tf.square(y_true - y_pred), axis=(1, 2))  # MSE for sequences\n",
        "\n",
        "    # KL divergence loss: Measure the divergence between the learned distribution and the prior\n",
        "    kl_loss = -0.5 * tf.reduce_mean(z_log_var - tf.square(z_mean) - tf.exp(z_log_var) + 1, axis=1)\n",
        "\n",
        "    # Combine both losses: total VAE loss\n",
        "    total_loss = reconstruction_loss + kl_loss\n",
        "    return total_loss\n"
      ],
      "metadata": {
        "id": "EZTVdBwlc0W5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras import layers\n",
        "\n",
        "# Encoder network definition (simplified)\n",
        "inputs = layers.Input(shape=(24, 1))\n",
        "x = layers.LSTM(64, activation='relu', return_sequences=True)(inputs)\n",
        "x = layers.LSTM(32, activation='relu')(x)\n",
        "\n",
        "# Latent space\n",
        "z_mean = layers.Dense(8, name='z_mean')(x)\n",
        "z_log_var = layers.Dense(8, name='z_log_var')(x)\n",
        "\n",
        "encoder = tf.keras.Model(inputs, [z_mean, z_log_var], name=\"encoder\")\n"
      ],
      "metadata": {
        "id": "lW4YfcOhc1e-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Decoder network definition\n",
        "latent_inputs = layers.Input(shape=(8,))\n",
        "x = layers.Dense(32, activation='relu')(latent_inputs)\n",
        "x = layers.RepeatVector(24)(x)\n",
        "x = layers.LSTM(32, return_sequences=True)(x)\n",
        "x = layers.LSTM(64, return_sequences=True)(x)\n",
        "outputs = layers.TimeDistributed(layers.Dense(1))(x)\n",
        "\n",
        "decoder = tf.keras.Model(latent_inputs, outputs, name=\"decoder\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        },
        "id": "8bkrSmeoc3kE",
        "outputId": "a4882181-9cd5-4a71-f4b6-4af66a2f0a4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'layers' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-15-6ad1d9c03eaa>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Decoder network definition\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mlatent_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlatent_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRepeatVector\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m24\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLSTM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_sequences\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'layers' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# VAE Model\n",
        "vae_outputs = decoder(encoder(inputs)[0])  # Decoder receives the z_mean\n",
        "\n",
        "vae = tf.keras.Model(inputs, vae_outputs, name=\"vae\")\n",
        "\n",
        "# Compile the model with the custom loss function\n",
        "vae.compile(optimizer='adam', loss=lambda y_true, y_pred: vae_loss(y_true, y_pred, encoder(inputs)[0], encoder(inputs)[1]))\n",
        "\n",
        "vae.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        },
        "id": "puYPalyOc45R",
        "outputId": "78718193-f038-4052-f147-09c70bdfe4be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'decoder' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-14-9fc784b7b52f>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# VAE Model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mvae_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Decoder receives the z_mean\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mvae\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvae_outputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"vae\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'decoder' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Custom loss function\n",
        "def vae_loss(y_true, y_pred, z_mean, z_log_var):\n",
        "    y_true = tf.cast(y_true, tf.float32)\n",
        "    y_pred = tf.cast(y_pred, tf.float32)\n",
        "\n",
        "    # MSE reconstruction loss per sequence\n",
        "    reconstruction_loss = tf.reduce_mean(tf.square(y_true - y_pred), axis=(1, 2))\n",
        "\n",
        "    # KL divergence loss\n",
        "    kl_loss = -0.5 * tf.reduce_mean(\n",
        "        1 + z_log_var - tf.square(z_mean) - tf.exp(z_log_var), axis=1\n",
        "    )\n",
        "\n",
        "    # Total loss per sample, then mean over batch\n",
        "    total_loss = reconstruction_loss + kl_loss\n",
        "    return tf.reduce_mean(total_loss)\n",
        "\n",
        "# Custom training step\n",
        "@tf.function\n",
        "def train_step(x_batch, encoder, decoder, vae, optimizer):\n",
        "    with tf.GradientTape() as tape:\n",
        "        encoder_output = encoder(x_batch)\n",
        "\n",
        "        if len(encoder_output) == 2:\n",
        "            z_mean, z_log_var = encoder_output\n",
        "        else:\n",
        "            z_mean, z_log_var, _ = encoder_output\n",
        "\n",
        "        y_pred = decoder(z_mean)\n",
        "        loss = vae_loss(x_batch, y_pred, z_mean, z_log_var)\n",
        "\n",
        "    gradients = tape.gradient(loss, vae.trainable_variables)\n",
        "    optimizer.apply_gradients(zip(gradients, vae.trainable_variables))\n",
        "\n",
        "    return loss\n",
        "\n",
        "# Training loop\n",
        "def train_vae(vae, encoder, decoder, train_data, epochs, batch_size, optimizer):\n",
        "    history = {'loss': []}\n",
        "\n",
        "    for epoch in range(epochs):\n",
        "        epoch_loss = 0.0\n",
        "        steps = 0\n",
        "\n",
        "        for i in range(0, len(train_data), batch_size):\n",
        "            x_batch = train_data[i:i+batch_size]\n",
        "            loss = train_step(x_batch, encoder, decoder, vae, optimizer)\n",
        "            epoch_loss += loss.numpy()\n",
        "            steps += 1\n",
        "\n",
        "        avg_loss = epoch_loss / steps\n",
        "        history['loss'].append(avg_loss)\n",
        "        print(f\"Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}\")\n",
        "\n",
        "    return history\n",
        "\n",
        "# Extract encoder and decoder\n",
        "encoder = vae.get_layer('encoder')\n",
        "decoder = vae.get_layer('decoder')\n",
        "\n",
        "# Optimizer\n",
        "optimizer = tf.keras.optimizers.Adam()\n",
        "\n",
        "# Train\n",
        "history = train_vae(vae, encoder, decoder, vae_train_sequences, epochs=30, batch_size=128, optimizer=optimizer)\n",
        "\n",
        "# Plot\n",
        "plt.plot(history['loss'])\n",
        "plt.title('VAE Training Loss')  # Fixed this string\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "GxxF8gWkhe7p",
        "outputId": "482be7c3-3ba9-4b3b-eb59-e9f31a401361"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30, Loss: 0.0136\n",
            "Epoch 2/30, Loss: 0.0155\n",
            "Epoch 3/30, Loss: 0.0179\n",
            "Epoch 4/30, Loss: 0.0195\n",
            "Epoch 5/30, Loss: 0.0202\n",
            "Epoch 6/30, Loss: 0.0202\n",
            "Epoch 7/30, Loss: 0.0209\n",
            "Epoch 8/30, Loss: 0.0194\n",
            "Epoch 9/30, Loss: 0.0213\n",
            "Epoch 10/30, Loss: 0.0217\n",
            "Epoch 11/30, Loss: 0.0224\n",
            "Epoch 12/30, Loss: 0.0223\n",
            "Epoch 13/30, Loss: 0.0229\n",
            "Epoch 14/30, Loss: 0.0233\n",
            "Epoch 15/30, Loss: 0.0248\n",
            "Epoch 16/30, Loss: 0.0231\n",
            "Epoch 17/30, Loss: 0.0250\n",
            "Epoch 18/30, Loss: 0.0253\n",
            "Epoch 19/30, Loss: 0.0256\n",
            "Epoch 20/30, Loss: 0.0251\n",
            "Epoch 21/30, Loss: 0.0238\n",
            "Epoch 22/30, Loss: 0.0263\n",
            "Epoch 23/30, Loss: 0.0273\n",
            "Epoch 24/30, Loss: 0.0283\n",
            "Epoch 25/30, Loss: 0.0258\n",
            "Epoch 26/30, Loss: 0.0256\n",
            "Epoch 27/30, Loss: 0.0277\n",
            "Epoch 28/30, Loss: 0.0278\n",
            "Epoch 29/30, Loss: 0.0287\n",
            "Epoch 30/30, Loss: 0.0283\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Number of synthetic sequences to generate\n",
        "num_sequences_to_generate = len(vae_train_sequences)  # Generate approximately the same amount of data\n",
        "print(f\"\\nGenerating {num_sequences_to_generate} synthetic sequences...\")\n",
        "\n",
        "# Sample random points from the latent space (standard normal distribution)\n",
        "random_latent_vectors = np.random.normal(size=(num_sequences_to_generate, latent_dim))\n",
        "\n",
        "# Use the decoder to generate sequences from these random points\n",
        "generated_sequences_scaled = decoder.predict(random_latent_vectors)\n",
        "\n",
        "# Reshape generated sequences back into a flat 1D array of scaled temperature values\n",
        "generated_data_scaled = generated_sequences_scaled.flatten()  # Flatten into one long series\n",
        "print(f\"Generated {len(generated_data_scaled)} synthetic data points (scaled).\")\n",
        "\n",
        "# Plot a few generated sequences vs original sequences\n",
        "num_plot = 5\n",
        "plt.figure(figsize=(15, 6))\n",
        "for i in range(num_plot):\n",
        "    plt.subplot(num_plot, 1, i+1)\n",
        "    plt.plot(vae_train_sequences[i, :, 0], label='Original Scaled')\n",
        "    plt.plot(generated_sequences_scaled[i, :, 0], label='Generated Scaled', alpha=0.7)\n",
        "    plt.legend()\n",
        "plt.suptitle('Sample Original vs. Generated VAE Sequences (Scaled)')\n",
        "plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust layout\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        },
        "id": "pJ9nbTm8mhx8",
        "outputId": "a7eda936-ae86-459a-e7e0-3358e844de1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'vae_train_sequences' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-94427e87e820>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Number of synthetic sequences to generate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mnum_sequences_to_generate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvae_train_sequences\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Generate approximately the same amount of data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"\\nGenerating {num_sequences_to_generate} synthetic sequences...\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'vae_train_sequences' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Original scaled training data (the 'y' column for Nixtla)\n",
        "original_y_scaled = train_nixtla_input_fe[['unique_id', 'ds', 'y']].copy()\n",
        "\n",
        "# Create a DataFrame for the generated data\n",
        "num_generated = len(generated_data_scaled)\n",
        "last_original_ds = original_y_scaled['ds'].max()\n",
        "\n",
        "# Generate new timestamps for the synthetic data, continuing from the end of original training data\n",
        "synthetic_ds = pd.date_range(start=last_original_ds + pd.Timedelta(freq),\n",
        "                             periods=num_generated,\n",
        "                             freq=freq)  # Use the same frequency as the original data\n",
        "\n",
        "# Create a DataFrame for the synthetic data\n",
        "synthetic_y_df = pd.DataFrame({\n",
        "    'unique_id': 'sensor_1',  # Assuming one sensor; change if needed\n",
        "    'ds': synthetic_ds,\n",
        "    'y': generated_data_scaled\n",
        "})\n",
        "\n",
        "# Concatenate original and synthetic 'y' data\n",
        "augmented_nixtla_input = pd.concat([original_y_scaled, synthetic_y_df], ignore_index=True)\n",
        "\n",
        "# Output the results\n",
        "print(f\"Original training data points: {len(original_y_scaled)}\")\n",
        "print(f\"Synthetic data points added: {len(synthetic_y_df)}\")\n",
        "print(f\"Augmented training data shape: {augmented_nixtla_input.shape}\")\n",
        "\n",
        "# Display the head and tail of the augmented data\n",
        "print(\"Augmented data ('y') head:\")\n",
        "print(augmented_nixtla_input.head())\n",
        "print(\"Augmented data ('y') tail:\")\n",
        "print(augmented_nixtla_input.tail())\n",
        "\n",
        "# Note about features for synthetic data\n",
        "print(\"\\nNOTE: For simplicity, we will re-train the forecasting model on augmented 'y' data without exogenous features.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q9QnHfJgnlSZ",
        "outputId": "7d4142e0-5989-4c3f-f0d9-8c70e82f8829"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original training data points: 76666\n",
            "Synthetic data points added: 1873464\n",
            "Augmented training data shape: (1950130, 3)\n",
            "Augmented data ('y') head:\n",
            "  unique_id                  ds         y\n",
            "0  sensor_1 2018-07-28 07:06:00  0.342857\n",
            "1  sensor_1 2018-07-28 07:08:00  0.347619\n",
            "2  sensor_1 2018-07-28 07:10:00  0.333333\n",
            "3  sensor_1 2018-07-28 07:12:00  0.333333\n",
            "4  sensor_1 2018-07-28 07:14:00  0.366667\n",
            "Augmented data ('y') tail:\n",
            "        unique_id                  ds         y\n",
            "1950125  sensor_1 2025-12-26 19:16:00  0.585546\n",
            "1950126  sensor_1 2025-12-26 19:18:00  0.585546\n",
            "1950127  sensor_1 2025-12-26 19:20:00  0.585546\n",
            "1950128  sensor_1 2025-12-26 19:22:00  0.585546\n",
            "1950129  sensor_1 2025-12-26 19:24:00  0.585546\n",
            "\n",
            "NOTE: For simplicity, we will re-train the forecasting model on augmented 'y' data without exogenous features.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Re-train Forecasting Model on Augmented Data\n",
        "print(f\"\\nRe-training Nixtla on AUGMENTED data (model='timegpt-1', horizon={horizon}, freq='{freq}')...\")\n",
        "\n",
        "if freq is not None and augmented_nixtla_input is not None:\n",
        "    try:\n",
        "        # Train on augmented 'y' data, without X_df this time\n",
        "        fcst_df_scaled_aug = nixtla_client.forecast(\n",
        "            df=augmented_nixtla_input,\n",
        "            # X_df=... # Skipping features for simplicity\n",
        "            h=horizon,\n",
        "            freq=freq,\n",
        "            model='timegpt-1',  # Using a supported model\n",
        "            level=[80, 95]\n",
        "        )\n",
        "        print(\"\\nNixtla forecast (trained on augmented data) received:\")\n",
        "        print(fcst_df_scaled_aug.head())\n",
        "    except Exception as e:\n",
        "        print(f\"\\nERROR during Nixtla forecast on augmented data: {e}\")\n",
        "        fcst_df_scaled_aug = None\n",
        "else:\n",
        "    print(\"\\nSkipping Nixtla forecast on augmented data due to missing freq or input.\")\n",
        "    fcst_df_scaled_aug = None\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TwTb90ZioIiv",
        "outputId": "d78acda6-a707-4eeb-eed3-ff4e5aa6403e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Re-training Nixtla on AUGMENTED data (model='timegpt-1', horizon=19167, freq='2min')...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:nixtla.nixtla_client:The specified horizon \"h\" exceeds the model horizon, this may lead to less accurate forecasts. Please consider using a smaller horizon.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Nixtla forecast (trained on augmented data) received:\n",
            "  unique_id                  ds   TimeGPT  TimeGPT-hi-80  TimeGPT-hi-95  \\\n",
            "0  sensor_1 2025-12-26 19:26:00  0.563708       0.573271       0.577131   \n",
            "1  sensor_1 2025-12-26 19:28:00  0.569051       0.577080       0.581312   \n",
            "2  sensor_1 2025-12-26 19:30:00  0.576158       0.584676       0.589819   \n",
            "3  sensor_1 2025-12-26 19:32:00  0.578305       0.587112       0.592951   \n",
            "4  sensor_1 2025-12-26 19:34:00  0.580152       0.588917       0.595079   \n",
            "\n",
            "   TimeGPT-lo-80  TimeGPT-lo-95  \n",
            "0       0.554145       0.550285  \n",
            "1       0.561022       0.556790  \n",
            "2       0.567641       0.562498  \n",
            "3       0.569498       0.563659  \n",
            "4       0.571388       0.565226  \n"
          ]
        }
      ]
    },
    {
      "source": [
        "# Inverse transform augmented model's predictions\n",
        "predictions_df_aug = None # Initialize\n",
        "if fcst_df_scaled_aug is not None:\n",
        "    pred_col_name_aug = 'AutoML' # Adjust if needed\n",
        "    if pred_col_name_aug not in fcst_df_scaled_aug.columns:\n",
        "        potential_cols_aug = [c for c in fcst_df_scaled_aug.columns if c not in ['unique_id', 'ds']\n",
        "                             and '-lo-' not in c and '-hi-' not in c]\n",
        "        if potential_cols_aug:\n",
        "            pred_col_name_aug = potential_cols_aug[0]\n",
        "            print(f\"Warning: Using prediction column '{pred_col_name_aug}'.\")\n",
        "        else:\n",
        "            print(\"Error: Could not find prediction column.\")\n",
        "            pred_col_name_aug = None\n",
        "    if pred_col_name_aug:\n",
        "        # Use the scaler fitted on the data WITH features ('scaler_fe')\n",
        "        predicted_values_aug = scaler_fe.inverse_transform(fcst_df_scaled_aug[[pred_col_name_aug]])\n",
        "        predictions_df_aug = pd.DataFrame({\n",
        "            'ds': fcst_df_scaled_aug['ds'],\n",
        "            'predicted_temp': predicted_values_aug.flatten()\n",
        "        }).set_index('ds')\n",
        "        print(\"\\nInverse transformed predictions (trained on augmented data):\")\n",
        "        print(predictions_df_aug.head())\n",
        "    # Align with actual test data\n",
        "    actual_vs_pred_aug_df = None\n",
        "    if predictions_df_aug is not None:\n",
        "        actual_vs_pred_aug_df = test_df_fe[[target_column]].copy()\n",
        "        actual_vs_pred_aug_df = actual_vs_pred_aug_df.join(predictions_df_aug[['predicted_temp']], how='inner')\n",
        "        actual_vs_pred_aug_df = actual_vs_pred_aug_df.dropna()\n",
        "        print(\"\\nAligned actual vs. predicted (augmented model):\")\n",
        "        print(actual_vs_pred_aug_df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AI8Eg0axvmPi",
        "outputId": "c5216ac4-7092-4167-890d-f69564fe5750"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: Using prediction column 'TimeGPT'.\n",
            "\n",
            "Inverse transformed predictions (trained on augmented data):\n",
            "                     predicted_temp\n",
            "ds                                 \n",
            "2025-12-26 19:26:00       38.347531\n",
            "2025-12-26 19:28:00       38.502478\n",
            "2025-12-26 19:30:00       38.708592\n",
            "2025-12-26 19:32:00       38.770852\n",
            "2025-12-26 19:34:00       38.824414\n",
            "\n",
            "Aligned actual vs. predicted (augmented model):\n",
            "Empty DataFrame\n",
            "Columns: [temp, predicted_temp]\n",
            "Index: []\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for unique 'ds' values in both dataframes\n",
        "print(\"Unique 'ds' values in test_df_fe:\")\n",
        "print(test_df_fe['ds'].unique()[:5])  # Display the first few unique values\n",
        "\n",
        "print(\"Unique 'ds' values in fcst_df_scaled_aug:\")\n",
        "print(fcst_df_scaled_aug['ds'].unique()[:5])  # Display the first few unique values\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O-9O3E77yQ_y",
        "outputId": "a668c7c8-8ae9-4a32-ea22-f373d47e6fa6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unique 'ds' values in test_df_fe:\n",
            "<DatetimeArray>\n",
            "['2018-10-23 02:50:00', '2018-10-23 02:52:00', '2018-10-23 02:54:00',\n",
            " '2018-10-23 02:56:00', '2018-10-23 02:58:00']\n",
            "Length: 5, dtype: datetime64[ns]\n",
            "Unique 'ds' values in fcst_df_scaled_aug:\n",
            "<DatetimeArray>\n",
            "['2025-12-26 19:26:00', '2025-12-26 19:28:00', '2025-12-26 19:30:00',\n",
            " '2025-12-26 19:32:00', '2025-12-26 19:34:00']\n",
            "Length: 5, dtype: datetime64[ns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "\n",
        "# ───── A) Bring your test & original y DataFrames back into memory ─────\n",
        "# 1) Held‑out test set\n",
        "if 'test_df_fe' not in globals():\n",
        "    if 'test_nixtla_input_fe' in globals():\n",
        "        print(\"Re-creating `test_df_fe` from `test_nixtla_input_fe`…\")\n",
        "        test_df_fe = test_nixtla_input_fe.copy()\n",
        "    else:\n",
        "        raise NameError(\n",
        "            \"`test_df_fe` not found. Please re-run the cell where you split your data \"\n",
        "            \"into training vs. test (the one that defines `test_nixtla_input_fe`).\"\n",
        "        )\n",
        "\n",
        "# 2) Original scaled y values\n",
        "if 'original_y_scaled' not in globals():\n",
        "    if 'train_nixtla_input_fe' in globals():\n",
        "        print(\"Re-creating `original_y_scaled` from `train_nixtla_input_fe`…\")\n",
        "        original_y_scaled = train_nixtla_input_fe[['unique_id','ds','y']].copy()\n",
        "    else:\n",
        "        raise NameError(\n",
        "            \"`original_y_scaled` not found. Please re-run the cell that builds \"\n",
        "            \"`train_nixtla_input_fe` (your training features DataFrame).\"\n",
        "        )\n",
        "\n",
        "# ───── B) Ensure other objects exist ─────\n",
        "required = ['scaler_fe','nixtla_client','freq','generated_data_scaled','target_column']\n",
        "for var in required:\n",
        "    if var not in globals():\n",
        "        raise NameError(f\"`{var}` is missing. Please run the cell that defines it.\")\n",
        "\n",
        "# ───── C) Recreate the augmented dataset ─────\n",
        "try:\n",
        "    augmented_nixtla_input\n",
        "except NameError:\n",
        "    print(\"Re-creating `augmented_nixtla_input`…\")\n",
        "    num_gen     = len(generated_data_scaled)\n",
        "    last_ds     = original_y_scaled['ds'].max()\n",
        "    synthetic_ds = pd.date_range(\n",
        "        start=last_ds + pd.Timedelta(freq),\n",
        "        periods=num_gen,\n",
        "        freq=freq\n",
        "    )\n",
        "    synthetic_y_df = pd.DataFrame({\n",
        "        'unique_id': 'sensor_1',\n",
        "        'ds':         synthetic_ds,\n",
        "        'y':          generated_data_scaled\n",
        "    })\n",
        "    augmented_nixtla_input = pd.concat([original_y_scaled, synthetic_y_df], ignore_index=True)\n",
        "\n",
        "# ───── D) Cut off training right before your test start ─────\n",
        "cutoff          = test_df_fe['ds'].min()\n",
        "train_up_to_test = augmented_nixtla_input[augmented_nixtla_input['ds'] < cutoff].copy()\n",
        "h_test          = len(test_df_fe)\n",
        "\n",
        "# ───── E) Forecast exactly over your 2018 window ─────\n",
        "fcst_df_scaled_aug = nixtla_client.forecast(\n",
        "    df    = train_up_to_test,\n",
        "    h     = h_test,\n",
        "    freq  = freq,\n",
        "    model = 'timegpt-1',\n",
        "    level = [80, 95]\n",
        ")\n",
        "print(f\"Forecast covers {fcst_df_scaled_aug['ds'].min()} → {fcst_df_scaled_aug['ds'].max()}\")\n",
        "\n",
        "# ───── F) Inverse‑transform the predictions ─────\n",
        "pred_col = 'AutoML'\n",
        "if pred_col not in fcst_df_scaled_aug.columns:\n",
        "    candidates = [\n",
        "        c for c in fcst_df_scaled_aug.columns\n",
        "        if c not in ['unique_id','ds'] and '-lo-' not in c and '-hi-' not in c\n",
        "    ]\n",
        "    if not candidates:\n",
        "        raise ValueError(\"No valid forecast column found—check `fcst_df_scaled_aug.columns`.\")\n",
        "    pred_col = candidates[0]\n",
        "    print(f\"Using '{pred_col}' as prediction column.\")\n",
        "\n",
        "pred_vals = scaler_fe.inverse_transform(fcst_df_scaled_aug[[pred_col]])\n",
        "predictions_df_aug = (\n",
        "    pd.DataFrame({'ds': fcst_df_scaled_aug['ds'], 'predicted_temp': pred_vals.flatten()})\n",
        "      .set_index('ds')\n",
        ")\n",
        "\n",
        "# ───── G) Align with actuals & compute metrics ─────\n",
        "actual_vs_pred_aug_df = (\n",
        "    test_df_fe.set_index('ds')[[target_column]]\n",
        "      .join(predictions_df_aug, how='inner')\n",
        "      .dropna()\n",
        ")\n",
        "if actual_vs_pred_aug_df.empty:\n",
        "    raise RuntimeError(\n",
        "        \"No overlapping timestamps after join—your forecast still isn't aligned with the test period.\"\n",
        "    )\n",
        "\n",
        "print(\"\\nSample alignment (first 5 rows):\")\n",
        "print(actual_vs_pred_aug_df.head())\n",
        "\n",
        "actual = actual_vs_pred_aug_df[target_column]\n",
        "pred    = actual_vs_pred_aug_df['predicted_temp']\n",
        "mae_aug = mean_absolute_error(actual, pred)\n",
        "mse_aug = mean_squared_error(actual, pred)\n",
        "rmse_aug= np.sqrt(mse_aug)\n",
        "print(f\"\\nMAE (augmented) = {mae_aug:.4f}\")\n",
        "print(f\"MSE (augmented) = {mse_aug:.4f}\")\n",
        "print(f\"RMSE (augmented)= {rmse_aug:.4f}\")\n",
        "\n",
        "# ───── H) Plot ─────\n",
        "plt.figure(figsize=(18,6))\n",
        "plt.plot(actual_vs_pred_aug_df.index, actual, label='Actual')\n",
        "plt.plot(actual_vs_pred_aug_df.index, pred,   label='Predicted (Augmented)', linestyle='--', alpha=0.8)\n",
        "plt.title('Actual vs. Predicted Temperature (Augmented Model)')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Temperature')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        },
        "id": "fojjGLof0pVx",
        "outputId": "d2df7757-7eb9-48e8-96dd-3237f72d3484"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "`test_df_fe` not found. Please re-run the cell where you split your data into training vs. test (the one that defines `test_nixtla_input_fe`).",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-11-f37e82ab2bcc>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mtest_df_fe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_nixtla_input_fe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         raise NameError(\n\u001b[0m\u001b[1;32m     14\u001b[0m             \u001b[0;34m\"`test_df_fe` not found. Please re-run the cell where you split your data \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m             \u001b[0;34m\"into training vs. test (the one that defines `test_nixtla_input_fe`).\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: `test_df_fe` not found. Please re-run the cell where you split your data into training vs. test (the one that defines `test_nixtla_input_fe`)."
          ]
        }
      ]
    }
  ]
}
